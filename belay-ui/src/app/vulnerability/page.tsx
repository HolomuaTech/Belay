'use client';
import { Box, Drawer, List, ListItem, ListItemIcon, ListItemText, ListItemButton, Typography, Breadcrumbs, Link, Modal, TextField } from '@mui/material';
import { DataGrid, GridColDef, GridSortDirection } from '@mui/x-data-grid';
// Add some icons for the drawer (you'll need to install @mui/icons-material)
import { Button } from '@mui/material';
import NavigateNextIcon from '@mui/icons-material/NavigateNext';
import SideMenu from '@/components/SideMenu';
import { useRef, useState } from 'react';
import { Description } from '@mui/icons-material';
import UploadFileIcon from '@mui/icons-material/UploadFile';


interface WhitelistModalProps {
  open: boolean;
  onClose: () => void;
  rowData: any;
}

const WhitelistModal = ({ open, onClose, rowData }: WhitelistModalProps) => (
  <Modal
    open={open}
    onClose={onClose}
    aria-labelledby="whitelist-modal-title"
  >
    <Box sx={{
      position: 'absolute',
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)',
      width: 400,
      bgcolor: 'background.paper',
      boxShadow: 24,
      p: 4,
      borderRadius: 1,
    }}>
      <Typography variant="h6" component="h2" sx={{ mb: 2 }}>
        Add to Whitelist
      </Typography>
      
      <Box sx={{ mb: 2 }}>
        <Typography variant="body1"><strong>Vulnerability:</strong> {rowData?.Vulnerability}</Typography>
        <Typography variant="body1"><strong>Severity:</strong> {rowData?.Severity}</Typography>
        <Typography variant="body1"><strong>CVSS:</strong> {typeof rowData?.CVSS === 'object' ? rowData?.CVSS?.metrics?.baseScore : rowData?.CVSS}</Typography>
        <Typography variant="body1"><strong>EPSS:</strong> {rowData?.EPSS?.toFixed(2)}</Typography>
      </Box>

      <TextField
        fullWidth
        label="Description"
        multiline
        rows={3}
        sx={{ mb: 2 }}
      />

      <TextField
        fullWidth
        label="Notes"
        multiline
        rows={2}
        sx={{ mb: 3 }}
      />

      <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
        <Button variant="outlined" onClick={onClose}>
          Cancel
        </Button>
        <Button 
          variant="contained"
          onClick={() => {
            console.log('Whitelist confirmed for:', rowData);
            onClose();
          }}
        >
          Add
        </Button>
      </Box>
    </Box>
  </Modal>
);

interface PoamModalProps {
  open: boolean;
  onClose: () => void;
  rowData: any;
}

const PoamModal = ({ open, onClose, rowData }: PoamModalProps) => (
  <Modal
    open={open}
    onClose={onClose}
    aria-labelledby="poam-modal-title"
  >
    <Box sx={{
      position: 'absolute',
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)',
      width: 600,
      bgcolor: 'background.paper',
      boxShadow: 24,
      p: 4,
      borderRadius: 1,
      maxHeight: '90vh',
      overflow: 'auto'
    }}>
      <Typography variant="h6" component="h2" sx={{ mb: 2 }}>
        Plan of Action & Milestones (POA&M)
      </Typography>
      
      <Box sx={{ mb: 2 }}>
        <Typography variant="body1"><strong>Vulnerability:</strong> {rowData?.Vulnerability}</Typography>
        <Typography variant="body1"><strong>Severity:</strong> {rowData?.Severity}</Typography>
        <Typography variant="body1"><strong>CVSS:</strong> {rowData?.CVSS}</Typography>
        <Typography variant="body1"><strong>EPSS:</strong> {rowData?.EPSS}</Typography>
      </Box>

      <TextField
        fullWidth
        label="Weakness Description"
        multiline
        rows={2}
        sx={{ mb: 2 }}
      />

      <TextField
        fullWidth
        label="Remediation Plan"
        multiline
        rows={3}
        sx={{ mb: 2 }}
      />

      <Box sx={{ mb: 2 }}>
        <Typography variant="subtitle1" sx={{ mb: 1 }}>Milestones</Typography>
        <TextField
          fullWidth
          label="Start Date"
          type="date"
          InputLabelProps={{ shrink: true }}
          sx={{ mb: 1 }}
        />
        <TextField
          fullWidth
          label="Completion Date"
          type="date"
          InputLabelProps={{ shrink: true }}
          sx={{ mb: 1 }}
        />
      </Box>

      <TextField
        fullWidth
        label="Resources Required"
        multiline
        rows={2}
        sx={{ mb: 2 }}
      />

      <TextField
        fullWidth
        label="Responsible Party"
        sx={{ mb: 3 }}
      />

      <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
        <Button variant="outlined" onClick={onClose}>
          Cancel
        </Button>
        <Button 
          variant="contained"
          onClick={() => {
            console.log('POAM submitted for:', rowData);
            onClose();
          }}
        >
          Save
        </Button>
      </Box>
    </Box>
  </Modal>
);

const ELIGIBLE_FILES = ['grype-vulnerability-report-full.json', 'semgrep-sast-report.json'] as const;

interface FileUploadModalProps {
  open: boolean;
  onClose: () => void;
  onUpload: (data: any[]) => void;
  fileType: 'grype' | 'semgrep';
}

const FileUploadModal = ({ open, onClose, onUpload, fileType }: FileUploadModalProps) => {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const expectedFile = fileType === 'grype' ? 'grype-vulnerability-report-full.json' : 'semgrep-sast-report.json';

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      try {
        const reader = new FileReader();
        reader.onload = (e) => {
          const content = JSON.parse(e.target?.result as string);
          let processedData;
          
          if (fileType === 'grype' && content.matches) {
            processedData = content.matches.map((match: any, index: number) => ({
              id: index + 1,
              Vulnerability: match.vulnerability.id,
              Severity: match.vulnerability.severity,
              CVSS: match.vulnerability.cvss?.[0]?.metrics?.baseScore || 0,
              Description: match.vulnerability.description,
              urls: match.vulnerability.urls || [],
              fix: match.vulnerability.fix || null
            }));
          } else if (fileType === 'semgrep' && content.results) {
            processedData = content.results.map((result: any, index: number) => ({
              id: index + 1,
              Vulnerability: result.check_id,
              Severity: result.extra.severity,
              CVSS: 0,
              Description: result.extra.message,
              urls: [result.extra.metadata?.references || ''].filter(Boolean),
              fix: {
                state: 'available',
                versions: [],
                text: result.extra.fix
              }
            }));
          }
          
          if (processedData) {
            onUpload(processedData);
            onClose();
          }
        };
        reader.readAsText(file);
      } catch (error) {
        alert('Invalid JSON file format');
        event.target.value = '';
      }
    }
  };

  return (
    <Modal open={open} onClose={onClose}>
      <Box sx={{
        position: 'absolute',
        top: '50%',
        left: '50%',
        transform: 'translate(-50%, -50%)',
        width: 400,
        bgcolor: 'background.paper',
        boxShadow: 24,
        p: 4,
        borderRadius: 1,
        textAlign: 'center'
      }}>
        <Typography variant="h6" component="h2" sx={{ mb: 3 }}>
          Upload {fileType === 'grype' ? 'Grype' : 'Semgrep'} Report
        </Typography>
        
        <input
          type="file"
          accept=".json"
          onChange={handleFileChange}
          ref={fileInputRef}
          style={{ display: 'none' }}
        />
        
        <Button
          variant="contained"
          onClick={() => fileInputRef.current?.click()}
          startIcon={<UploadFileIcon />}
          sx={{ mb: 2 }}
        >
          Select {fileType === 'grype' ? 'Grype' : 'Semgrep'} Report
        </Button>
        
        <Typography variant="body2" color="text.secondary">
          Expected filename: {expectedFile}
        </Typography>
      </Box>
    </Modal>
  );
};

// Add new ViewModal component
interface ViewModalProps {
  open: boolean;
  onClose: () => void;
  rowData: any;
}

const ViewModal = ({ open, onClose, rowData }: ViewModalProps) => (
  <Modal
    open={open}
    onClose={onClose}
    aria-labelledby="view-modal-title"
  >
    <Box sx={{
      position: 'absolute',
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)',
      width: 600,
      bgcolor: 'background.paper',
      boxShadow: 24,
      p: 4,
      borderRadius: 1,
      maxHeight: '90vh',
      overflow: 'auto'
    }}>
      <Typography variant="h6" component="h2" sx={{ mb: 2 }}>
        Vulnerability Details
      </Typography>
      
      <Box sx={{ mb: 2 }}>
        <Typography variant="body1"><strong>Vulnerability:</strong> {rowData?.Vulnerability}</Typography>
        <Typography variant="body1"><strong>Severity:</strong> {rowData?.Severity}</Typography>
        <Typography variant="body1"><strong>CVSS:</strong> {rowData?.CVSS}</Typography>
        
        <Typography variant="body1" sx={{ mt: 2 }}><strong>Description:</strong></Typography>
        <TextField
          multiline
          rows={4}
          fullWidth
          value={rowData?.Description || ''}
          InputProps={{ readOnly: true }}
          sx={{ mt: 1, mb: 2 }}
        />

        {rowData?.fix && (
          <>
            <Typography variant="body1" sx={{ mt: 2 }}><strong>Fix Information:</strong></Typography>
            <Box sx={{ mt: 1, pl: 2 }}>
              {rowData.fix.versions && rowData.fix.versions.length > 0 && (
                <Typography variant="body2">
                  <strong>Fixed Versions: </strong> 
                  {rowData.fix.versions.join(', ')}
                </Typography>
              )}
              {rowData.fix.state && (
                <Typography variant="body2">
                  <strong>Fix State: </strong> 
                  {rowData.fix.state}
                </Typography>
              )}
              {rowData.fix.text && (
                <Typography variant="body2">
                  <strong>Fix: </strong> 
                  {rowData.fix.text}
                </Typography>
              )}
            </Box>
          </>
        )}

        {rowData?.urls && rowData.urls.length > 0 && (
          <>
            <Typography variant="body1" sx={{ mt: 2 }}><strong>References:</strong></Typography>
            <Box sx={{ mt: 1, pl: 2 }}>
              {rowData.urls.map((url: string, index: number) => (
                <Link
                  key={index}
                  href={url}
                  target="_blank"
                  rel="noopener noreferrer"
                  sx={{ display: 'block', mb: 0.5 }}
                >
                  {url}
                </Link>
              ))}
            </Box>
          </>
        )}
      </Box>

      <Button variant="contained" onClick={onClose} sx={{ mt: 2 }}>
        Close
      </Button>
    </Box>
  </Modal>
);

export default function Vulnerability() {
  const [rows, setRows] = useState<any[]>([]);
  const [semgrepRows, setSemgrepRows] = useState<any[]>([]);
  const [uploadModalOpen, setUploadModalOpen] = useState(false);
  const [semgrepUploadModalOpen, setSemgrepUploadModalOpen] = useState(false);
  const [whitelistModalOpen, setWhitelistModalOpen] = useState(false);
  const [viewModalOpen, setViewModalOpen] = useState(false);
  const [poamModalOpen, setPoamModalOpen] = useState(false);
  const [selectedRow, setSelectedRow] = useState<any>(null);

  // Add initial sort model state
  const [sortModel, setSortModel] = useState([
    {
      field: 'CVSS',
      sort: 'desc' as GridSortDirection
    }
  ]);

  const columns = [
    { field: 'Vulnerability', headerName: 'Vulnerability', width: 130 },
    { field: 'Severity', headerName: 'Severity', width: 130 },
    { field: 'CVSS', headerName: 'CVSS', width: 130 },
    { 
      field: 'Description',
      headerName: 'Description',
      width: 200,
      flex: 1,
    },
    {
      field: 'actions',
      headerName: 'Actions',
      width: 300,
      renderCell: (params: any) => (
        <Box>
          <Button
            variant="contained"
            size="small"
            onClick={() => {
              setSelectedRow(params.row);
              setViewModalOpen(true);
            }}
            sx={{ mr: 1 }}
          >
            View
          </Button>
          <Button
            variant="contained"
            size="small"
            onClick={() => {
              setSelectedRow(params.row);
              setWhitelistModalOpen(true);
            }}
            sx={{ mr: 1 }}
          >
            Whitelist
          </Button>
          <Button
            variant="contained"
            size="small"
            onClick={() => {
              setSelectedRow(params.row);
              setPoamModalOpen(true);
            }}
          >
            POAM
          </Button>
        </Box>
      ),
    },
  ];

  const handleCloseModal = () => {
    setWhitelistModalOpen(false);
    setSelectedRow(null);
  };

  const handleClosePoamModal = () => {
    setPoamModalOpen(false);
    setSelectedRow(null);
  };

  const handleDataUpload = (newData: any[]) => {
    setRows(newData);
    setUploadModalOpen(false);
  };

  const handleSemgrepDataUpload = (newData: any[]) => {
    setSemgrepRows(newData);
    setSemgrepUploadModalOpen(false);
  };

  return (
    <Box sx={{ display: 'flex' }}>
      <SideMenu />

      <Box sx={{ 
        flexGrow: 1, 
        p: 3,
        height: '100vh', 
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'flex-start',
        backgroundColor: 'background.default'
      }}>
        <Typography 
          variant="h4" 
          sx={{ 
            mb: 2,
            color: 'text.primary'
          }}
        >
          Vulnerability Management
        </Typography>
        
        <Breadcrumbs 
          separator={<NavigateNextIcon fontSize="small" />}
          sx={{ mb: 3 }}
        >
          <Link 
            underline="hover" 
            color="inherit" 
            href="#" 
            sx={{ '&:hover': { cursor: 'pointer' } }}
          >
            Project
          </Link>
          <Link 
            underline="hover" 
            color="inherit" 
            href="#" 
            sx={{ '&:hover': { cursor: 'pointer' } }}
          >
            Repository
          </Link>
          <Link 
            underline="hover" 
            color="inherit" 
            href="#" 
            sx={{ '&:hover': { cursor: 'pointer' } }}
          >
            main
          </Link>
        </Breadcrumbs>
        <Box 
            sx={{ 
                backgroundColor: 'background.paper',
                p: 2,
                mb: 2,
                borderRadius: 1,
                boxShadow: 1
            }}
        >
            <Typography 
                variant="h6" 
                sx={{ color: 'text.primary', mb: 2 }}
            >
                Container Vulnerability Scan - Grype
            </Typography>
            <Typography 
                variant="body1" 
                sx={{ color: 'text.primary' }}
            >
                View container vulnerabilities from your Portage invoked Grype scan.  Changes to the whitelist will be reflected in the whitelist file in the repository.  Additionally, the whitelist will be saved in the enterprise database for analytics.
            </Typography>
        </Box>
        <Box sx={{ 
          backgroundColor: 'background.paper', 
          padding: 2, 
          mb: 3,
          borderRadius: 1,
          width: '100%',
          boxShadow: 1
        }}>
          <Button 
            variant="contained" 
            sx={{ mb: 2 }}
            onClick={() => setUploadModalOpen(true)}
          >
            Upload Grype Artifact
          </Button>
          
          <div style={{ height: 600, width: '100%' }}>
            <DataGrid
              rows={rows}
              columns={columns}
              sortModel={sortModel}
              onSortModelChange={(model) => setSortModel(model)}
              initialState={{
                pagination: {
                  paginationModel: { pageSize: 5, page: 0 },
                },
              }}
              pageSizeOptions={[5]}
              disableRowSelectionOnClick
            />
          </div>
        </Box>
        <Box 
            sx={{ 
                backgroundColor: 'background.paper',
                p: 2,
                mb: 2,
                borderRadius: 1,
                boxShadow: 1
            }}
        >
            <Typography 
                variant="h6" 
                sx={{ color: 'text.primary', mb: 2 }}
            >
                Static Application Security Testing SAST - Semgrep
            </Typography>
            <Typography 
                variant="body1" 
                sx={{ color: 'text.primary' }}
            >
                View application code vulnerabilities from your Portage invoked Semgrep scan.  Changes to the whitelist will be reflected in the whitelist file in the repository.  Additionally, the whitelist will be saved in the enterprise database for analytics.
            </Typography>
        </Box>
        <Box sx={{ 
          backgroundColor: 'background.paper', 
          padding: 2, 
          borderRadius: 1,
          width: '100%',
          boxShadow: 1,
          mb: 3  // Add margin bottom to separate the grids
        }}>
          <Button 
            variant="contained" 
            sx={{ mb: 2 }}
            onClick={() => setSemgrepUploadModalOpen(true)}
          >
            Upload Semgrep Artifact
          </Button>
          
          <div style={{ height: 600, width: '100%' }}>
            <DataGrid
              rows={semgrepRows}
              columns={columns}
              sortModel={sortModel}
              onSortModelChange={(model) => setSortModel(model)}
              initialState={{
                pagination: {
                  paginationModel: { pageSize: 5, page: 0 },
                },
              }}
              pageSizeOptions={[5]}
              disableRowSelectionOnClick
            />
          </div>
        </Box>

        <WhitelistModal 
          open={whitelistModalOpen}
          onClose={handleCloseModal}
          rowData={selectedRow}
        />
        <PoamModal 
          open={poamModalOpen}
          onClose={handleClosePoamModal}
          rowData={selectedRow}
        />
        <FileUploadModal 
          open={uploadModalOpen}
          onClose={() => setUploadModalOpen(false)}
          onUpload={handleDataUpload}
          fileType="grype"
        />
        <FileUploadModal 
          open={semgrepUploadModalOpen}
          onClose={() => setSemgrepUploadModalOpen(false)}
          onUpload={handleSemgrepDataUpload}
          fileType="semgrep"
        />
        <ViewModal 
          open={viewModalOpen}
          onClose={() => setViewModalOpen(false)}
          rowData={selectedRow}
        />
      </Box>
    </Box>
  );
}